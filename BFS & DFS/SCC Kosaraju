class Solution
{
	public:
	
	void dfsFill( int u, vector<vector<int>> &adj, vector<bool>&visited, stack<int>&st)
	{
	    visited[u]=true;
	    for(auto v:adj[u])
	    {
	        if(visited[v]==false)
	        {
	            dfsFill(v,adj,visited,st);
	        }
	    }
	    st.push(u);
	}
	
	void dfs( int u, vector<vector<int>>&adjReversed, vector<bool>&visited)
	{
	    visited[u]=true;
	    for(auto v:adjReversed[u])
	    {
	        if(visited[v]==false)
	            dfs(v,adjReversed,visited);
	    }
	}
	
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        stack<int>st;
        vector<bool>visited(V,false);
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                dfsFill(i,adj,visited,st);
            }
        }
        
        vector<vector<int>> adjReversed(V);
        for(int u=0;u<V;u++)
        {
            for(auto v:adj[u])
            {
                adjReversed[v].push_back(u);
            }
        }
        
        int count=0;
        visited=vector<bool>(V,false);
        while(!st.empty())
        {
            int node=st.top();
            st.pop();
            
            if(visited[node]==false)
            {
                dfs(node,adjReversed,visited);
                count++;
            }
        }
        return count;
    }
};
