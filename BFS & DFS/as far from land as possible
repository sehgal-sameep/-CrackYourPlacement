class Solution {
public:

    vector<vector<int>> directions = { {1,0}, {-1,0}, {0,1}, {0,-1} };

    bool isValid(int x, int y, int n)
    {
        return x>=0 && y>=0 && x<n && y<n;
    }

    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        queue<pair<int,int>>q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                    q.push({i,j}); 
            }
        }

        if(q.size()==0 || q.size()==n*n)
            return -1;

        int ans=0;
        while(!q.empty())
        {
            int s=q.size();
          
            for(int i=0;i<s;i++)
            {
                int x= q.front().first;
                int y= q.front().second;
                q.pop();

                for(auto dir:directions)
                {
                    int X = x+dir[0];
                    int Y = y+dir[1];
                    if(isValid(X,Y,n) && grid[X][Y]==0)
                    {
                        grid[X][Y]=1;
                        q.push({X,Y});
                    }
                }
            }  
            ans++;
        }
        return ans-1;
    }
};
