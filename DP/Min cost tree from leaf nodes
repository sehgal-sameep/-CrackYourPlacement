class Solution {
public:

    int helper(int left, int right, vector<int>&nums, map<pair<int,int>,int>&mp, vector<vector<int>>&dp)
    {
        if(left==right)
            return 0;
        if(dp[left][right]!=-1)
            return dp[left][right];
        
        int mini=INT_MAX;
        for(int i=left;i<right;i++)
        {
            mini = min(mini, mp[{left,i}]*mp[{i+1,right}] + helper(left,i,nums,mp,dp) + helper(i+1,right,nums,mp,dp));
        }
        return dp[left][right]=mini;
    }

    int mctFromLeafValues(vector<int>& arr) {
        int n=arr.size();
        unordered_map<int,int>mp2;
        map<pair<int,int>,int>mp;

        for(int i=0;i<n;i++)
        {
            int maxi=arr[i];
            for(int j=i;j<n;j++)
            {
                maxi=max(maxi,arr[j]);
                mp[{i,j}]=maxi;
            }
        }

        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));

        return helper(0,n-1,arr,mp,dp);
    }
};
