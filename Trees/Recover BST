/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i=0;
    void recoverTree(TreeNode* root) {
        vector<int>inorder;
        helper(inorder,root);
        sort(inorder.begin(),inorder.end());
        traversal(root,inorder);
    }

    void helper(vector<int>&inorder,TreeNode*root)
    {
        if(root==NULL) return;
        helper(inorder,root->left);
        inorder.push_back(root->val);
        helper(inorder,root->right);
        return;
    }

    void traversal(TreeNode*root,vector<int>&inorder)
    {
        if(root==NULL) return;
        traversal(root->left,inorder);
        if(root->val!=inorder[i])
        {
            root->val=inorder[i];
        }
        i++;
        traversal(root->right,inorder);
    }
};




____________________________________________________



void inorder(TreeNode* root, TreeNode*& prev, TreeNode*& first, TreeNode*& second) {
    if (!root) return;
    
    inorder(root->left, prev, first, second);
    
    if (prev && root->val < prev->val) {
        if (!first) first = prev;
        second = root;
    }
    prev = root;
    
    inorder(root->right, prev, first, second);
}

void recoverTree(TreeNode* root) {
    TreeNode *first = nullptr, *second = nullptr, *prev = nullptr;
    inorder(root, prev, first, second);
    
    if (first && second) {
        std::swap(first->val, second->val);
    }
}
