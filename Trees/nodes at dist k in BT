/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>ans;
        map<TreeNode*,TreeNode*>m;
        fillParents(root,m);
        queue<TreeNode*>q;
        q.push(target);
        unordered_set<TreeNode*>visited;
        visited.insert(target);

        int level=0;
        while(!q.empty())
        {
            int n=q.size();
            if(level==k)
            {
                while(!q.empty())
                {
                    ans.push_back(q.front()->val);
                    q.pop();
                }
                break;
            }
            for(int i=0;i<n;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                if(node->left && visited.find(node->left)==visited.end())
                {
                    q.push(node->left);
                    visited.insert(node->left);
                }
                    
                if(node->right && visited.find(node->right)==visited.end())
                {
                    q.push(node->right);
                    visited.insert(node->right);
                }
                    
                if(m.find(node)!=m.end() && visited.find(m[node])==visited.end())
                {
                    q.push(m[node]);
                    visited.insert(m[node]);
                }
                    
            }
            level++;
        }
        return ans;
    }

    void fillParents(TreeNode*root, map<TreeNode*,TreeNode*>&m)
    {
        if(root==NULL)
            return;
        if(root->left)
            m[root->left]=root;
        fillParents(root->left,m);
        if(root->right)
            m[root->right]=root;
        fillParents(root->right,m);
    }
};
